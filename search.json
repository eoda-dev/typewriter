[{"path":"/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2024 rdantic authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"/articles/rdantic.html","id":"models","dir":"Articles","previous_headings":"","what":"Models","title":"rdantic","text":"","code":"person_model <- base_model(   name = is_scalar_character,   age = is_scalar_integer )  person_model(   name = \"Lee\",   age = 100L ) #> $name #> [1] \"Lee\" #>  #> $age #> [1] 100  try(person_model(name = \"Lee\", age = 100)) #> Error in person_model(name = \"Lee\", age = 100) : Type check(s) failed #> # --- #> Type check failed for 'age' #> value:  num 100 #> type: double #> length: 1 #> { #>     .Call(ffi_is_integer, x, 1L) #> }  # It is also possible to pass lists: external_data <- list(name = \"Morgan\", age = 100L)  model_validate(external_data, person_model) #> $name #> [1] \"Morgan\" #>  #> $age #> [1] 100"},{"path":"/articles/rdantic.html","id":"validators","dir":"Articles","previous_headings":"","what":"Validators","title":"rdantic","text":"","code":"person_model <- base_model(   name = is_scalar_character,   age = is_scalar_integer,   .validators_before = list(     age = as.integer   ) )  person_model(name = \"Lee\", age = 100) #> $name #> [1] \"Lee\" #>  #> $age #> [1] 100"},{"path":"/articles/rdantic.html","id":"nested-models","dir":"Articles","previous_headings":"","what":"Nested models","title":"rdantic","text":"","code":"address_model <- base_model(   city = is_scalar_character,   country = is_scalar_character )  person_model <- base_model(   name = is_scalar_character,   age = is_scalar_integer,   address = is_rdantic_model(address_model) )  person_model(   name = \"Peter\",   age = 12L,   address = address_model(     city = \"Kassel\",     country = \"Germany\"   ) ) #> $name #> [1] \"Peter\" #>  #> $age #> [1] 12 #>  #> $address #> $city #> [1] \"Kassel\" #>  #> $country #> [1] \"Germany\"  try(person_model(   name = \"Peter\",   age = 12L,   address = address_model(     city = c(\"Kassel\", \"Berlin\"),     country = \"Germany\"   ) )) #> Error in address_model(city = c(\"Kassel\", \"Berlin\"), country = \"Germany\") :  #>   Type check(s) failed #> # --- #> Type check failed for 'city' #> value:  chr [1:2] \"Kassel\" \"Berlin\" #> type: character #> length: 2 #> { #>     is_character(x, n = 1L) #> }  external_data <- list(   statusCode = 200L,   data = list(     value = 10,     createdAt = \"2024-08-12 20:20:05\"   ) )  data_model <- base_model(   value = is_scalar_double,   created_at = is_scalar_character,   .validators_after = list(     created_at = as.POSIXct   ) )  api_model <- base_model(   status_code = is_scalar_integer,   data = is_rdantic_model(data_model) )  external_data |>   names_to_snake_case() |>   model_validate(api_model) #> $status_code #> [1] 200 #>  #> $data #> $data$value #> [1] 10 #>  #> $data$created_at #> [1] \"2024-08-12 20:20:05\""},{"path":"/articles/rdantic.html","id":"type-safety-of-function-arguments","dir":"Articles","previous_headings":"","what":"Type safety of function arguments","title":"rdantic","text":"also possible add type checks way:","code":"add_two_numbers <- function(a, b) {   check_args(     a = is_scalar_double,     b = is_scalar_double   )   a + b }  add_two_numbers(10, 20) #> [1] 30  try(add_two_numbers(10, c(20, 30))) #> Error in base_model(fields)(.x = e) : Type check(s) failed #> # --- #> Type check failed for 'b' #> value:  num [1:2] 20 30 #> type: double #> length: 2 #> { #>     .Call(ffi_is_double, x, 1L, NULL) #> } add_two_numbers <- function(a = is_scalar_integer,                             b = is_scalar_integer) {   check_args()   a + b }  add_two_numbers(1L, 3L) #> [1] 4  try(add_two_numbers(1L, 4.6)) #> Error in base_model(fields)(.x = e) : Type check(s) failed #> # --- #> Type check failed for 'b' #> value:  num 4.6 #> type: double #> length: 1 #> { #>     .Call(ffi_is_integer, x, 1L) #> }"},{"path":"/articles/rdantic.html","id":"data-frames","dir":"Articles","previous_headings":"","what":"Data frames","title":"rdantic","text":"","code":"cars_model <- base_model(   speed = is_integer,   dist = is_integer )  try(model_validate(cars, cars_model)) #> Error in model_fn(.x = obj) : Type check(s) failed #> # --- #> Type check failed for 'speed' #> value:  num [1:50] 4 4 7 7 8 9 10 10 10 11 ... #> type: double #> length: 50 #> { #>     .Call(ffi_is_integer, x, n) #> } #> # --- #> Type check failed for 'dist' #> value:  num [1:50] 2 10 4 22 16 10 18 26 34 17 ... #> type: double #> length: 50 #> { #>     .Call(ffi_is_integer, x, n) #> }  cars_model <- base_model(   speed = is_integer,   dist = is_integer,   .validators_before = list(     speed = as.integer,     dist = as.integer   ) )  model_validate(cars, cars_model) |>   head() #>   speed dist #> 1     4    2 #> 2     4   10 #> 3     7    4 #> 4     7   22 #> 5     8   16 #> 6     9   10"},{"path":"/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Stefan Kuethe. Author, maintainer, copyright holder. Nico Friess. Author.","code":""},{"path":"/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Kuethe S, Friess N (2024). rdantic: Type Safety R. R package version 0.1.0 https://github.com/eoda-dev/rdantic https://eoda-dev.github.io/rdantic/, https://github.com/eoda-dev/rdantic  https://eoda-dev.github.io/rdantic/.","code":"@Manual{,   title = {rdantic: Type Safety for R},   author = {Stefan Kuethe and Nico Friess},   year = {2024},   note = {R package version 0.1.0   https://github.com/eoda-dev/rdantic   https://eoda-dev.github.io/rdantic/},   url = {https://github.com/eoda-dev/rdantic   https://eoda-dev.github.io/rdantic/}, }"},{"path":"/index.html","id":"rdantic","dir":"","previous_headings":"","what":"Type Safety for R","title":"Type Safety for R","text":"goal rdantic add type safety R code.","code":""},{"path":"/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Type Safety for R","text":"can install development version rdantic GitHub :","code":"# install.packages(\"devtools\") devtools::install_github(\"eoda-dev/rdantic\")"},{"path":"/index.html","id":"examples","dir":"","previous_headings":"","what":"Examples","title":"Type Safety for R","text":"","code":"library(rdantic) library(rlang)  # Models my_model <- base_model(   a = is_integer,   b = is_integer )  (m <- my_model(a = 2L, b = 4L)) #> $a #> [1] 2 #>  #> $b #> [1] 4 try(m$a <- 10.5) #> Error in check_assignment(x, name, value) : Type check failed. #> { #>     .Call(ffi_is_integer, x, n) #> } try(my_model(a = 2L, b = 4.5)) #> Error in my_model(a = 2L, b = 4.5) : Type check(s) failed #> # --- #> Type check failed for 'b' #> value:  num 4.5 #> type: double #> length: 1 #> { #>     .Call(ffi_is_integer, x, n) #> } # Functions f <- function(a, b = 5L) {   check_args(     a = is_integer,     b = is_scalar_integer   )   a + b }  f(5L) #> [1] 10 try(f(5L, c(3L, 4L))) #> Error in base_model(fields)(.x = e) : Type check(s) failed #> # --- #> Type check failed for 'b' #> value:  int [1:2] 3 4 #> type: integer #> length: 2 #> { #>     .Call(ffi_is_integer, x, 1L) #> } # Data frames df <- data.frame(   id = 1:3,   letter = letters[1:3] )  my_model <- base_model(   id = is_integer,   letter = is_character )  df |> model_validate(my_model) #>   id letter #> 1  1      a #> 2  2      b #> 3  3      c df$id <- as.double(df$id) try(df |> model_validate(my_model)) #> Error in model_fn(.x = obj) : Type check(s) failed #> # --- #> Type check failed for 'id' #> value:  num [1:3] 1 2 3 #> type: double #> length: 3 #> { #>     .Call(ffi_is_integer, x, n) #> }"},{"path":"/reference/base_model.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a model factory function — base_model","title":"Create a model factory function — base_model","text":"Create model factory function","code":""},{"path":"/reference/base_model.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a model factory function — base_model","text":"","code":"base_model(   fields = list(),   ...,   .model_config = model_config(),   .model_pre_init = NULL,   .model_post_init = NULL,   .validators_before = list(),   .validators_after = list() )"},{"path":"/reference/base_model.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a model factory function — base_model","text":"fields named list field definitions. ... Named arguments field definitions. Normally either fields ... supplied. .model_config See model_config(). .model_pre_init callback function executed type checks. .model_post_init callback function executed type checks. .validators_before named list field validators executed type checks. .validators_after named list field validators executed type checks.","code":""},{"path":"/reference/base_model.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a model factory function — base_model","text":"model factory function.","code":""},{"path":"/reference/base_model.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a model factory function — base_model","text":"","code":"# --- # Models my_model <- base_model(   a = is.integer,   b = is.integer,   txt = is.character )  # Succeeds my_model(a = 1L, b = 2L, txt = \"My awesome model\") #> $a #> [1] 1 #>  #> $b #> [1] 2 #>  #> $txt #> [1] \"My awesome model\" #>   # Fails try(my_model(a = 1, b = 2L, txt = \"My awesome model\")) #> Error in my_model(a = 1, b = 2L, txt = \"My awesome model\") :  #>   Type check(s) failed #> # --- #> Type check failed for 'a' #> value:  num 1 #> type: double #> length: 1 #> .Primitive(\"is.integer\")  # --- # Functions f <- function(a, b) {   check_args(a = is.integer, b = is.integer)   a + b }  # Succeeds f(4L, 5L) #> [1] 9  # Fails try(f(4, 5)) #> Error in base_model(fields)(.x = e) : Type check(s) failed #> # --- #> Type check failed for 'a' #> value:  num 4 #> type: double #> length: 1 #> .Primitive(\"is.integer\") #> # --- #> Type check failed for 'b' #> value:  num 5 #> type: double #> length: 1 #> .Primitive(\"is.integer\")  # --- # Data frames df <- data.frame(   id = 1:2,   name = c(\"Donald\", \"Lee\"),   surname = c(\"Byrd\", \"Morgan\") )  df_model <- base_model(   id = is.integer,   name = is.character,   surname = is.character,   full_name = is.character,   .model_pre_init = function(obj) {     obj$full_name <- paste(obj$name, obj$surname)     return(obj)   } )  # Succeeds df_model(.x = df) #>   id   name surname   full_name #> 1  1 Donald    Byrd Donald Byrd #> 2  2    Lee  Morgan  Lee Morgan  # Fails df$id <- NULL try(df_model(.x = df)) #> Error in df_model(.x = df) : Type check(s) failed #> # --- #> Type check failed for 'id' #> value:  NULL #> type: NULL #> length: 0 #> .Primitive(\"is.integer\")"},{"path":"/reference/base_settings.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a settings factory function — base_settings","title":"Create a settings factory function — base_settings","text":"Create settings factory function","code":""},{"path":"/reference/base_settings.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a settings factory function — base_settings","text":"","code":"base_settings(..., .prefix = \"\")"},{"path":"/reference/base_settings.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a settings factory function — base_settings","text":"... env vars type converter functions .prefix prefix env vars","code":""},{"path":"/reference/base_settings.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a settings factory function — base_settings","text":"settings factory function","code":""},{"path":"/reference/base_settings.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a settings factory function — base_settings","text":"","code":"Sys.setenv(POSTGRES_USERNAME = \"postgres\") Sys.setenv(POSTGRES_PASSWORD = \"superSecret!\") Sys.setenv(POSTGRES_PORT = 15432)  postgres_settings <- base_settings(   username = as.character,   password = as.character,   port = as.integer,   .prefix = \"POSTGRES\" )  # Succeeds postgres_settings() #> $username #> [1] \"postgres\" #>  #> $password #> [1] \"superSecret!\" #>  #> $port #> [1] 15432 #>   Sys.setenv(POSTGRES_PORT = \"\")  # Fails try(postgres_settings()) #> Error in postgres_settings() : port = NA"},{"path":"/reference/check_args.html","id":null,"dir":"Reference","previous_headings":"","what":"Check function arguments — check_args","title":"Check function arguments — check_args","text":"Check function arguments","code":""},{"path":"/reference/check_args.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check function arguments — check_args","text":"","code":"check_args(...)"},{"path":"/reference/check_args.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check function arguments — check_args","text":"... Arg definitions.","code":""},{"path":"/reference/check_args.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check function arguments — check_args","text":"caller environment.","code":""},{"path":"/reference/check_args.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check function arguments — check_args","text":"","code":"{   f <- function(a, b) {     check_args(a = is.integer, b = is.integer)     a + b   }    # Succeeds   f(10L, 20L)    # Fails   try(f(10L, 4.6)) } #> Error in base_model(fields)(.x = e) : Type check(s) failed #> # --- #> Type check failed for 'b' #> value:  num 4.6 #> type: double #> length: 1 #> .Primitive(\"is.integer\")"},{"path":"/reference/is_any.html","id":null,"dir":"Reference","previous_headings":"","what":"Type predicate any — is_any","title":"Type predicate any — is_any","text":"Type predicate ","code":""},{"path":"/reference/is_any.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Type predicate any — is_any","text":"","code":"is_any(x)"},{"path":"/reference/is_any.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Type predicate any — is_any","text":"x Object tested.","code":""},{"path":"/reference/is_any.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Type predicate any — is_any","text":"TRUE","code":""},{"path":"/reference/is_any.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Type predicate any — is_any","text":"","code":"my_model <- base_model(   a = is_any,   b = is.integer )  # Succeeds my_model(a = 10, b = 20L) #> $a #> [1] 10 #>  #> $b #> [1] 20 #>   # Also succeeds my_model(a = \"Hi\", b = 20L) #> $a #> [1] \"Hi\" #>  #> $b #> [1] 20 #>"},{"path":"/reference/is_rdantic_model.html","id":null,"dir":"Reference","previous_headings":"","what":"Type predicate rdantic model — is_rdantic_model","title":"Type predicate rdantic model — is_rdantic_model","text":"Type predicate rdantic model","code":""},{"path":"/reference/is_rdantic_model.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Type predicate rdantic model — is_rdantic_model","text":"","code":"is_rdantic_model(model_fn)"},{"path":"/reference/is_rdantic_model.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Type predicate rdantic model — is_rdantic_model","text":"model_fn model factory function created base_model().","code":""},{"path":"/reference/model_config.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a model config object — model_config","title":"Create a model config object — model_config","text":"Create model config object","code":""},{"path":"/reference/model_config.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a model config object — model_config","text":"","code":"model_config(allow_extra = FALSE, str_to_lower = FALSE, ...)"},{"path":"/reference/model_config.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a model config object — model_config","text":"allow_extra Whether allow extra fields without type check. str_to_lower Convert strings lower case. ... used moment","code":""},{"path":"/reference/model_config.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a model config object — model_config","text":"model config object can used base_model().","code":""},{"path":"/reference/model_field.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a model field — model_field","title":"Create a model field — model_field","text":"Create model field","code":""},{"path":"/reference/model_field.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a model field — model_field","text":"","code":"model_field(fn, default = NA, alias = NULL, ...)"},{"path":"/reference/model_field.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a model field — model_field","text":"fn type check function. default default value field. alias, ... used moment","code":""},{"path":"/reference/model_validate.html","id":null,"dir":"Reference","previous_headings":"","what":"Validate a list or a data frame — model_validate","title":"Validate a list or a data frame — model_validate","text":"Validate list data frame","code":""},{"path":"/reference/model_validate.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Validate a list or a data frame — model_validate","text":"","code":"model_validate(obj, model_fn)"},{"path":"/reference/model_validate.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Validate a list or a data frame — model_validate","text":"obj list data.frame. model_fn model factory function created base_model().","code":""},{"path":"/reference/names_to_camel_case.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert names of an object to camel case — names_to_camel_case","title":"Convert names of an object to camel case — names_to_camel_case","text":"Convert names object camel case","code":""},{"path":"/reference/names_to_camel_case.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert names of an object to camel case — names_to_camel_case","text":"","code":"names_to_camel_case(obj, .recursive = TRUE)"},{"path":"/reference/names_to_camel_case.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert names of an object to camel case — names_to_camel_case","text":"obj list data frame. .recursive Whether convert names levels.","code":""},{"path":"/reference/names_to_camel_case.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert names of an object to camel case — names_to_camel_case","text":"input object camel case names.","code":""},{"path":"/reference/names_to_snake_case.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert names of an object to snake case — names_to_snake_case","title":"Convert names of an object to snake case — names_to_snake_case","text":"Convert names object snake case","code":""},{"path":"/reference/names_to_snake_case.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert names of an object to snake case — names_to_snake_case","text":"","code":"names_to_snake_case(obj, .recursive = TRUE)"},{"path":"/reference/names_to_snake_case.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert names of an object to snake case — names_to_snake_case","text":"obj list data frame. .recursive Whether convert names levels.","code":""},{"path":"/reference/names_to_snake_case.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert names of an object to snake case — names_to_snake_case","text":"input object snake case names.","code":""},{"path":"/news/index.html","id":"rdantic-010","dir":"Changelog","previous_headings":"","what":"rdantic 0.1.0","title":"rdantic 0.1.0","text":"Add NEWS.md track changes.","code":""}]
