[{"path":"/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2024 typewriter authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"/articles/typewriter.html","id":"typed-structures","dir":"Articles","previous_headings":"","what":"Typed structures","title":"typewriter","text":"make adding type safety fun possible, typed structure just extended R list types defined type check functions (like .integer) type strings (like \"integer\"): Try assign character value integer field: Try create new object invalid type: use type strings , typed_struct close structures type safe programming languages like Rust Go: typed structure used input function: can also use validate data frame: type can also described function takes value validated arguments returns TRUE case success:","code":"my_type <- typed_struct(   a_number = \"integer\",   some_text = \"character\" )   obj <- my_type(   a_number = 1L,   some_text = \"typewriter\" )  obj #> $a_number #> [1] 1 #>  #> $some_text #> [1] \"typewriter\"  class(obj) #> [1] \"list\"       \"typewriter\" \"my_type\" try(   obj$a_number <- \"Hi\" ) #> Error in check_assignment(x, name, value) : Type check failed. #> { #>     typeof(x) == \"integer\" #> } try(   my_type(     a_number = 1,     some_text = \"typewriter\"   ) ) #> Error in my_type(a_number = 1, some_text = \"typewriter\") :  #>   Type check(s) failed #> # --- #> Type check failed for 'a_number' #> value:  num 1 #> type: double #> class: numeric #> length: 1 #> expected: { #>     typeof(x) == \"integer\" #> } # Rust struct Person {     name: String,     age: u8 } # Go type Person struct {   name string   age int } # R Person <- typed_struct(   name = \"character\",   age = \"integer\" ) say_hello_to <- function(person) {   paste(\"Hello\", person$name, \"you are\", person$age, \"years old!\") }  hanna <- Person(name = \"Hanna\", age = 10L) say_hello_to(hanna) #> [1] \"Hello Hanna you are 10 years old!\" df <- data.frame(   name = c(\"Peter\", \"Hanna\"),   age = c(12L, 10L) )  Person(df) #>    name age #> 1 Peter  12 #> 2 Hanna  10  df$id <- 1:2 try(Person(df)) #> Error in Person(df) : Forbidden field(s): id my_type <- typed_struct(   a_number = is.integer,   some_text = is.character )  obj <- my_type(   a_number = 1:2,   some_text = \"typewriter\" )  obj #> $a_number #> [1] 1 2 #>  #> $some_text #> [1] \"typewriter\"  try(   my_type(     a_number = NULL,     some_text = \"typewriter\"   ) ) #> Error in my_type(a_number = NULL, some_text = \"typewriter\") :  #>   Type check(s) failed #> # --- #> Type check failed for 'a_number' #> value:  NULL #> type: NULL #> class: NULL #> length: 0 #> expected: .Primitive(\"is.integer\")"},{"path":"/articles/typewriter.html","id":"typed-functions","dir":"Articles","previous_headings":"","what":"Typed functions","title":"typewriter","text":"check_args() can add type checks functions: also possible add type definition directly function arguments make visible user: can see example can also check length value adding length type string \"integer:1\".","code":"add_two_numbers <- function(a, b) {   check_args(     a = \"integer\",     b = \"integer\"   )   a + b }  add_two_numbers(10L, 20L) #> [1] 30  try(   add_two_numbers(10, 20) ) #> Error in base_model(fields)(.x = func_env) : Type check(s) failed #> # --- #> Type check failed for 'a' #> value:  num 10 #> type: double #> class: numeric #> length: 1 #> expected: { #>     typeof(x) == \"integer\" #> } #> # --- #> Type check failed for 'b' #> value:  num 20 #> type: double #> class: numeric #> length: 1 #> expected: { #>     typeof(x) == \"integer\" #> } multiply_two_numbers <- function(a = \"integer\", b = \"integer:1\") {   check_args()   a * b }  try(   multiply_two_numbers(10L, 1:2) ) #> Error in base_model(fields)(.x = func_env) : Type check(s) failed #> # --- #> Type check failed for 'b' #> value:  int [1:2] 1 2 #> type: integer #> class: integer #> length: 2 #> expected: { #>     typeof(x) == \"integer\" & length(x) == 1L #> }"},{"path":"/articles/typewriter.html","id":"the-base_model-function","dir":"Articles","previous_headings":"","what":"The base_model() function","title":"typewriter","text":"hood typed_struct() check_args() uses base_model() got name Pydantic’s BaseModel class. gives options like validating inputs assignment:","code":"my_model <- base_model(   a = \"integer\",   b = \"double\",   .validators_before = list(     a = as.integer,     b = function(b) round(b, 2)   ) )  obj <- my_model(a = 10, b = 20.123456)  typeof(obj$a) #> [1] \"integer\"  obj #> $a #> [1] 10 #>  #> $b #> [1] 20.12"},{"path":"/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Stefan Kuethe. Author, maintainer, copyright holder. Nico Friess. Author.","code":""},{"path":"/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Kuethe S, Friess N (2024). typewriter: Type Safety R. R package version 0.1.0 https://github.com/eoda-dev/typewriter https://eoda-dev.github.io/typewriter/, https://github.com/eoda-dev/typewriter  https://eoda-dev.github.io/typewriter/.","code":"@Manual{,   title = {typewriter: Type Safety for R},   author = {Stefan Kuethe and Nico Friess},   year = {2024},   note = {R package version 0.1.0   https://github.com/eoda-dev/typewriter   https://eoda-dev.github.io/typewriter/},   url = {https://github.com/eoda-dev/typewriter   https://eoda-dev.github.io/typewriter/}, }"},{"path":"/index.html","id":"typewriter","dir":"","previous_headings":"","what":"Type Safety for R","title":"Type Safety for R","text":"goal typewriter add type safety R code.","code":""},{"path":"/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Type Safety for R","text":"can install development version typewriter GitHub :","code":"# install.packages(\"devtools\") devtools::install_github(\"eoda-dev/typewriter\")"},{"path":"/index.html","id":"examples","dir":"","previous_headings":"","what":"Examples","title":"Type Safety for R","text":"","code":"library(typewriter)  # Functions f <- function(a = \"integer\", b = \"integer:1\") {   check_args()   a + b }  f(5L, 3L) #> [1] 8 try(f(5L, c(3L, 4L))) #> Error in base_model(fields)(.x = func_env) : Type check(s) failed #> # --- #> Type check failed for 'b' #> value:  int [1:2] 3 4 #> type: integer #> class: integer #> length: 2 #> expected: { #>     typeof(x) == \"integer\" & length(x) == 1L #> } # Data frames df <- data.frame(   id = 1:3,   letter = letters[1:3] )  my_model <- base_model(   id = \"integer\",   letter = \"character\" )  model_validate(df, my_model) #>   id letter #> 1  1      a #> 2  2      b #> 3  3      c df$id <- as.double(df$id) try(model_validate(df, my_model)) #> Error in model_fn(.x = obj) : Type check(s) failed #> # --- #> Type check failed for 'id' #> value:  num [1:3] 1 2 3 #> type: double #> class: numeric #> length: 3 #> expected: { #>     typeof(x) == \"integer\" #> } # Models my_model <- base_model(   a = \"integer\",   b = \"integer\" )  (m <- my_model(a = 2L, b = 4L)) #> $a #> [1] 2 #>  #> $b #> [1] 4 try(m$a <- 10.5) #> Error in check_assignment(x, name, value) : Type check failed. #> { #>     typeof(x) == \"integer\" #> } try(my_model(a = 2L, b = 4.5)) #> Error in my_model(a = 2L, b = 4.5) : Type check(s) failed #> # --- #> Type check failed for 'b' #> value:  num 4.5 #> type: double #> class: numeric #> length: 1 #> expected: { #>     typeof(x) == \"integer\" #> }"},{"path":"/reference/Optional.html","id":null,"dir":"Reference","previous_headings":"","what":"Mark a parameter as optional — Optional","title":"Mark a parameter as optional — Optional","text":"Mark parameter optional","code":""},{"path":"/reference/Optional.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Mark a parameter as optional — Optional","text":"","code":"Optional(type_check_fn)"},{"path":"/reference/Optional.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Mark a parameter as optional — Optional","text":"type_check_fn Type check function type string.","code":""},{"path":"/reference/Optional.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Mark a parameter as optional — Optional","text":"type check function","code":""},{"path":"/reference/Optional.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Mark a parameter as optional — Optional","text":"","code":"my_model <- base_model(   a = \"integer\",   b = Optional(\"integer\") )  my_model(a = 10L) #> $a #> [1] 10 #>  #> $b #> [1] NA #>"},{"path":"/reference/Union.html","id":null,"dir":"Reference","previous_headings":"","what":"Allow multiple types — Union","title":"Allow multiple types — Union","text":"Allow multiple types","code":""},{"path":"/reference/Union.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Allow multiple types — Union","text":"","code":"Union(...)"},{"path":"/reference/Union.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Allow multiple types — Union","text":"... Type check functions type strings","code":""},{"path":"/reference/Union.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Allow multiple types — Union","text":"type check function","code":""},{"path":"/reference/Union.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Allow multiple types — Union","text":"","code":"m <- typed_struct(   a = Union(is.integer, is.null),   b = Union(\"integer\", \"logical\") )  # Succeeds m(a = 10L, b = TRUE) #> $a #> [1] 10 #>  #> $b #> [1] TRUE #>   # Also succeeds m(a = NULL, b = 10L) #> $a #> NULL #>  #> $b #> [1] 10 #>"},{"path":"/reference/base_model.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a model factory function — base_model","title":"Create a model factory function — base_model","text":"Create model factory function","code":""},{"path":"/reference/base_model.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a model factory function — base_model","text":"","code":"base_model(   fields = list(),   ...,   .model_config = model_config(),   .model_pre_init = NULL,   .model_post_init = NULL,   .validators_before = list(),   .validators_after = list(),   .strict_args_order = FALSE )"},{"path":"/reference/base_model.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a model factory function — base_model","text":"fields named list field definitions. ... Named arguments field definitions. Normally either fields ... supplied. .model_config See model_config(). .model_pre_init callback function executed type checks. .model_post_init callback function executed type checks. .validators_before named list field validators executed type checks. .validators_after named list field validators executed type checks. .strict_args_order set TRUE, .x parameter returned model factory function last function argument. useful want pass arguments unnamed.","code":""},{"path":"/reference/base_model.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a model factory function — base_model","text":"model factory function.","code":""},{"path":"/reference/base_model.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a model factory function — base_model","text":"","code":"# --- # Models my_model <- base_model(   a = is.integer,   b = is.integer,   txt = is.character )  # Succeeds my_model(a = 1L, b = 2L, txt = \"My awesome model\") #> $a #> [1] 1 #>  #> $b #> [1] 2 #>  #> $txt #> [1] \"My awesome model\" #>   # Fails try(my_model(a = 1, b = 2L, txt = \"My awesome model\")) #> Error in my_model(a = 1, b = 2L, txt = \"My awesome model\") :  #>   Type check(s) failed #> # --- #> Type check failed for 'a' #> value:  num 1 #> type: double #> class: numeric #> length: 1 #> expected: .Primitive(\"is.integer\")  # --- # Functions f <- function(a, b) {   check_args(a = is.integer, b = is.integer)   a + b }  # Succeeds f(4L, 5L) #> [1] 9  # Fails try(f(4, 5)) #> Error in base_model(fields)(.x = func_env) : Type check(s) failed #> # --- #> Type check failed for 'a' #> value:  num 4 #> type: double #> class: numeric #> length: 1 #> expected: .Primitive(\"is.integer\") #> # --- #> Type check failed for 'b' #> value:  num 5 #> type: double #> class: numeric #> length: 1 #> expected: .Primitive(\"is.integer\")  # --- # Data frames df <- data.frame(   id = 1:2,   name = c(\"Donald\", \"Lee\"),   surname = c(\"Byrd\", \"Morgan\") )  df_model <- base_model(   id = is.integer,   name = is.character,   surname = is.character,   full_name = is.character,   .model_pre_init = function(obj) {     obj$full_name <- paste(obj$name, obj$surname)     return(obj)   } )  # Succeeds df_model(.x = df) #>   id   name surname   full_name #> 1  1 Donald    Byrd Donald Byrd #> 2  2    Lee  Morgan  Lee Morgan  # Fails df$id <- NULL try(df_model(.x = df)) #> Error in df_model(.x = df) : Type check(s) failed #> # --- #> Type check failed for 'id' #> value:  NULL #> type: NULL #> class: NULL #> length: 0 #> expected: .Primitive(\"is.integer\")"},{"path":"/reference/check_args.html","id":null,"dir":"Reference","previous_headings":"","what":"Check function arguments — check_args","title":"Check function arguments — check_args","text":"Check function arguments","code":""},{"path":"/reference/check_args.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Check function arguments — check_args","text":"","code":"check_args(...)"},{"path":"/reference/check_args.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Check function arguments — check_args","text":"... Arg definitions.","code":""},{"path":"/reference/check_args.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Check function arguments — check_args","text":"caller environment.","code":""},{"path":"/reference/check_args.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Check function arguments — check_args","text":"","code":"{   f <- function(a, b) {     check_args(a = is.integer, b = is.integer)     a + b   }    # Succeeds   f(10L, 20L)    # Fails   try(f(10L, 4.6)) } #> Error in base_model(fields)(.x = func_env) : Type check(s) failed #> # --- #> Type check failed for 'b' #> value:  num 4.6 #> type: double #> class: numeric #> length: 1 #> expected: .Primitive(\"is.integer\")"},{"path":"/reference/dtype.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a type check function — dtype","title":"Create a type check function — dtype","text":"Create type check function","code":""},{"path":"/reference/dtype.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a type check function — dtype","text":"","code":"dtype(type_check, default = NA)"},{"path":"/reference/dtype.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a type check function — dtype","text":"type_check Type check function type string. default default value.","code":""},{"path":"/reference/dtype.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a type check function — dtype","text":"type check function","code":""},{"path":"/reference/is_any.html","id":null,"dir":"Reference","previous_headings":"","what":"Type predicate any — is_any","title":"Type predicate any — is_any","text":"Type predicate ","code":""},{"path":"/reference/is_any.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Type predicate any — is_any","text":"","code":"is_any(x)"},{"path":"/reference/is_any.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Type predicate any — is_any","text":"x Object tested.","code":""},{"path":"/reference/is_any.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Type predicate any — is_any","text":"TRUE","code":""},{"path":"/reference/is_any.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Type predicate any — is_any","text":"","code":"my_model <- base_model(   a = is_any,   b = is.integer )  # Succeeds my_model(a = 10, b = 20L) #> $a #> [1] 10 #>  #> $b #> [1] 20 #>   # Also succeeds my_model(a = \"Hi\", b = 20L) #> $a #> [1] \"Hi\" #>  #> $b #> [1] 20 #>"},{"path":"/reference/is_typewriter_model.html","id":null,"dir":"Reference","previous_headings":"","what":"Type predicate typewriter model — is_typewriter_model","title":"Type predicate typewriter model — is_typewriter_model","text":"Type predicate typewriter model","code":""},{"path":"/reference/is_typewriter_model.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Type predicate typewriter model — is_typewriter_model","text":"","code":"is_typewriter_model(model_fn)"},{"path":"/reference/is_typewriter_model.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Type predicate typewriter model — is_typewriter_model","text":"model_fn model factory function created base_model().","code":""},{"path":"/reference/model_config.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a model config object — model_config","title":"Create a model config object — model_config","text":"Create model config object","code":""},{"path":"/reference/model_config.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a model config object — model_config","text":"","code":"model_config(extra = c(\"ignore\", \"allow\", \"forbid\"), str_to_lower = FALSE, ...)"},{"path":"/reference/model_config.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a model config object — model_config","text":"extra Whether allow extra fields without type check. str_to_lower Convert strings lower case. ... used moment","code":""},{"path":"/reference/model_config.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a model config object — model_config","text":"model config object can used base_model().","code":""},{"path":"/reference/model_config.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a model config object — model_config","text":"","code":"cfg <- model_config(str_to_lower = TRUE)  my_model <- base_model(   bar = is.character,   foo = is.character,   .model_config = cfg )  my_model(bar = \"FOO\", foo = \"BAR\") #> $bar #> [1] \"foo\" #>  #> $foo #> [1] \"bar\" #>"},{"path":"/reference/model_dump.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert model to base list — model_dump","title":"Convert model to base list — model_dump","text":"Convert model base list","code":""},{"path":"/reference/model_dump.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert model to base list — model_dump","text":"","code":"model_dump(   obj,   by_alias = FALSE,   exclude_null = FALSE,   exclude_na = FALSE,   ... )"},{"path":"/reference/model_dump.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert model to base list — model_dump","text":"obj typewriter model object by_alias Use aliases names. exclude_null Whether exclude NULL values. exclude_na Whether exclude NA values. ... used moment.","code":""},{"path":"/reference/model_dump.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert model to base list — model_dump","text":"base list object","code":""},{"path":"/reference/model_field.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a model field — model_field","title":"Create a model field — model_field","text":"Create model field","code":""},{"path":"/reference/model_field.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a model field — model_field","text":"","code":"model_field(fn, default = NA, alias = NULL, error_msg = NULL, ...)"},{"path":"/reference/model_field.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a model field — model_field","text":"fn type check function. default default value field. alias alias can used model_dump() error_msg, ... used moment","code":""},{"path":"/reference/model_field.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a model field — model_field","text":"model field.","code":""},{"path":"/reference/model_from_template.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a model factory function from a template object — model_from_template","title":"Create a model factory function from a template object — model_from_template","text":"Create model factory function template object","code":""},{"path":"/reference/model_from_template.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a model factory function from a template object — model_from_template","text":"","code":"model_from_template(   template,   use_defaults = FALSE,   use_length = FALSE,   optional = FALSE )"},{"path":"/reference/model_from_template.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a model factory function from a template object — model_from_template","text":"template template list derive model . use_defaults Whether use template values default values. use_length used moment optional Logical whether variable optional. Alternative vector names values optional.","code":""},{"path":"/reference/model_from_template.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a model factory function from a template object — model_from_template","text":"model factory function.","code":""},{"path":"/reference/model_from_template.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a model factory function from a template object — model_from_template","text":"","code":"template <- list(   a = 10L,   b = 10L )   my_model <- model_from_template(template) # Succeeds my_model(a = c(1:10), b = 7L) #> $a #>  [1]  1  2  3  4  5  6  7  8  9 10 #>  #> $b #> [1] 7 #>   # Fails try(my_model(10, 8)) #> Error in obj[[name]] : subscript out of bounds   # Set values to optional my_model <- model_from_template(template, optional = TRUE) my_model(a = 12L) # returns NA for b #> $a #> [1] 12 #>  #> $b #> [1] NA #>   # When optional is set to FALSE the model throws an error my_model <- model_from_template(template, optional = FALSE) try(my_model(a = 12L)) # returns NA for b #> Error in my_model(a = 12L) : Type check(s) failed #> # --- #> Type check failed for 'b' #> value:  logi NA #> type: logical #> class: logical #> length: 1 #> expected: { #>     typeof(x) == \"integer\" & class(x) == \"integer\" & mode(x) ==  #>         \"numeric\" #> }   # Use defaults if none provided my_model <- model_from_template(template, use_defaults = TRUE, optional = FALSE) my_model(a = 12L) #> $a #> [1] 12 #>  #> $b #> [1] 10 #>"},{"path":"/reference/model_validate.html","id":null,"dir":"Reference","previous_headings":"","what":"Validate a list or a data frame — model_validate","title":"Validate a list or a data frame — model_validate","text":"Validate list data frame","code":""},{"path":"/reference/model_validate.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Validate a list or a data frame — model_validate","text":"","code":"model_validate(obj, model_fn)"},{"path":"/reference/model_validate.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Validate a list or a data frame — model_validate","text":"obj list data.frame. model_fn model factory function created base_model().","code":""},{"path":"/reference/names_to_camel_case.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert names of an object to camel case — names_to_camel_case","title":"Convert names of an object to camel case — names_to_camel_case","text":"Convert names object camel case","code":""},{"path":"/reference/names_to_camel_case.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert names of an object to camel case — names_to_camel_case","text":"","code":"names_to_camel_case(obj, .recursive = TRUE)"},{"path":"/reference/names_to_camel_case.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert names of an object to camel case — names_to_camel_case","text":"obj list data frame. .recursive Whether convert names levels.","code":""},{"path":"/reference/names_to_camel_case.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert names of an object to camel case — names_to_camel_case","text":"input object camel case names.","code":""},{"path":"/reference/names_to_snake_case.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert names of an object to snake case — names_to_snake_case","title":"Convert names of an object to snake case — names_to_snake_case","text":"Convert names object snake case","code":""},{"path":"/reference/names_to_snake_case.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert names of an object to snake case — names_to_snake_case","text":"","code":"names_to_snake_case(obj, .recursive = TRUE)"},{"path":"/reference/names_to_snake_case.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert names of an object to snake case — names_to_snake_case","text":"obj list data frame. .recursive Whether convert names levels.","code":""},{"path":"/reference/names_to_snake_case.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert names of an object to snake case — names_to_snake_case","text":"input object snake case names.","code":""},{"path":"/reference/typed_struct.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a typed structure — typed_struct","title":"Create a typed structure — typed_struct","text":"Create typed structure","code":""},{"path":"/reference/typed_struct.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a typed structure — typed_struct","text":"","code":"typed_struct(...)"},{"path":"/reference/typed_struct.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a typed structure — typed_struct","text":"... Type definitions (Type check functions)","code":""},{"path":"/reference/typed_struct.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a typed structure — typed_struct","text":"type factory function.","code":""},{"path":"/reference/typed_struct.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a typed structure — typed_struct","text":"","code":"Person <- typed_struct(   name = \"character\",   age = \"integer\" )  hanna <- Person(   name = \"Hanna\",   age = 10L )  hanna #> $name #> [1] \"Hanna\" #>  #> $age #> [1] 10 #>   inherits(hanna, \"Person\") #> [1] TRUE inherits(hanna, \"list\") #> [1] TRUE"},{"path":"/news/index.html","id":"typewriter-010","dir":"Changelog","previous_headings":"","what":"typewriter 0.1.0","title":"typewriter 0.1.0","text":"Add NEWS.md track changes.","code":""}]
